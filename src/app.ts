// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    BACKEND_URL: 'https://your-backend.onrender.com' // –ó–ê–ú–ï–ù–ò–¢–ï –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
};

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const profileCard = document.querySelector('.profile-card') as HTMLDivElement;
const loadingSection = document.getElementById('loading-section') as HTMLDivElement;
const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
const avatarPlaceholder = document.getElementById('avatar-placeholder') as HTMLDivElement;
const userName = document.getElementById('user-name') as HTMLHeadingElement;
const userUsername = document.getElementById('user-username') as HTMLParagraphElement;
const userBio = document.getElementById('user-bio') as HTMLTextAreaElement;
const saveBtn = document.getElementById('save-btn') as HTMLButtonElement;

// –¢–∏–ø—ã –¥–ª—è TypeScript
interface TelegramUser {
    id: number;
    first_name: string;
    last_name?: string;
    username?: string;
    photo_url?: string;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function main() {
    try {
        showLoading(true);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        const tg = (window as any).Telegram.WebApp;
        tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const tgUser: TelegramUser | undefined = tg.initDataUnsafe?.user;
        
        if (!tgUser) {
            throw new Error('–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', tgUser);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
        const response = await fetch(`${CONFIG.BACKEND_URL}/auth/telegram`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(tgUser)
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞');
        }
        
        const data = await response.json();
        const user = data.user;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        showUserData(user);
        
        showLoading(false);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserData(user: any) {
    // –ê–≤–∞—Ç–∞—Ä
    if (user.photo_url) {
        userAvatar.src = user.photo_url;
        userAvatar.style.display = 'block';
        avatarPlaceholder.style.display = 'none';
    } else {
        const firstLetter = user.first_name ? user.first_name[0].toUpperCase() : 'U';
        avatarPlaceholder.textContent = firstLetter;
        userAvatar.style.display = 'none';
        avatarPlaceholder.style.display = 'flex';
    }
    
    // –ò–º—è
    userName.textContent = `${user.first_name} ${user.last_name || ''}`.trim();
    
    // –Æ–∑–µ—Ä–Ω–µ–π–º
    if (user.username) {
        userUsername.textContent = `@${user.username}`;
    } else {
        userUsername.textContent = '';
    }
    
    // –ë–∏–æ
    userBio.value = user.bio || '';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(show: boolean) {
    if (show) {
        loadingSection.classList.add('show');
        profileCard.style.display = 'none';
    } else {
        loadingSection.classList.remove('show');
        profileCard.style.display = 'block';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
saveBtn.addEventListener('click', async () => {
    try {
        saveBtn.disabled = true;
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω—è–µ–º...';
        
        const tg = (window as any).Telegram.WebApp;
        const tgUser: TelegramUser | undefined = tg.initDataUnsafe?.user;
        
        if (!tgUser) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
        const response = await fetch(`${CONFIG.BACKEND_URL}/profile/${tgUser.id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                bio: userBio.value
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        tg.showPopup({
            title: '–£—Å–ø–µ—Ö!',
            message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
            buttons: [{ type: 'ok' }]
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
document.addEventListener('DOMContentLoaded', main);