// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    BACKEND_URL: 'https://eatprayit-backend.onrender.com'
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    userAvatar: document.getElementById('user-avatar') as HTMLImageElement,
    avatarPlaceholderSmall: document.getElementById('avatar-placeholder-small') as HTMLDivElement,
    userNameHeader: document.getElementById('user-name-header') as HTMLHeadingElement,
    mainScreen: document.getElementById('main-screen') as HTMLDivElement,
    editProfileScreen: document.getElementById('edit-profile-screen') as HTMLDivElement,
    loadingSection: document.getElementById('loading-section') as HTMLDivElement,
    userAvatarEdit: document.getElementById('user-avatar-edit') as HTMLImageElement,
    avatarPlaceholderEdit: document.getElementById('avatar-placeholder-edit') as HTMLDivElement,
    editBio: document.getElementById('edit-bio') as HTMLTextAreaElement,
    saveProfileBtn: document.getElementById('save-profile-btn') as HTMLButtonElement,
    cancelEditBtn: document.getElementById('cancel-edit-btn') as HTMLButtonElement
};

let currentUser: any = null;

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function initializeApp(): Promise<void> {
    try {
        showLoading(true);
        
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞
        console.log('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–µ–Ω–¥:', CONFIG.BACKEND_URL);
        
        const healthCheck = await fetch(`${CONFIG.BACKEND_URL}/health`);
        console.log('‚ù§Ô∏è Health check:', healthCheck.status);
        
        if (!healthCheck.ok) {
            throw new Error('–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        const tg = (window as any).Telegram.WebApp;
        if (!tg) {
            throw new Error('Telegram WebApp –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        tg.expand();
        tg.ready();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramUser = tg.initDataUnsafe?.user;
        console.log('üë§ –î–∞–Ω–Ω—ã–µ Telegram:', telegramUser);
        
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        }
        
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥...');
        const response = await fetch(`${CONFIG.BACKEND_URL}/auth/telegram`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(telegramUser)
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞:', errorText);
            throw new Error(`–û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        
        currentUser = data.user;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderHeader(currentUser);
        showLoading(false);
        showScreen('main');
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
        let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
        
        if (error instanceof Error) {
            if (error.message.includes('–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            } else if (error.message.includes('Telegram WebApp')) {
                errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram. –û—Ç–∫—Ä–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram.';
            } else if (error.message.includes('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
                errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.';
            }
        }
        
        showError(errorMessage);
        showLoading(false);
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–ø–∫–µ
function renderHeader(user: any): void {
    if (!user) return;
    
    if (user.photo_url) {
        elements.userAvatar.src = user.photo_url;
        elements.userAvatar.style.display = 'block';
        elements.avatarPlaceholderSmall.style.display = 'none';
    } else {
        const firstLetter = user.first_name ? user.first_name[0].toUpperCase() : 'U';
        elements.avatarPlaceholderSmall.textContent = firstLetter;
        elements.userAvatar.style.display = 'none';
        elements.avatarPlaceholderSmall.style.display = 'flex';
    }
    
    elements.userNameHeader.textContent = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screen: 'main' | 'edit'): void {
    if (screen === 'main') {
        elements.mainScreen.style.display = 'block';
        elements.editProfileScreen.style.display = 'none';
    } else {
        elements.mainScreen.style.display = 'none';
        elements.editProfileScreen.style.display = 'block';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading(show: boolean): void {
    if (show) {
        elements.loadingSection.classList.add('show');
        elements.mainScreen.style.display = 'none';
        elements.editProfileScreen.style.display = 'none';
    } else {
        elements.loadingSection.classList.remove('show');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message: string): void {
    const tg = (window as any).Telegram.WebApp;
    if (tg && tg.showPopup) {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: message,
            buttons: [{ type: 'ok' }]
        });
    } else {
        alert(message);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function showEditProfile(): void {
    if (!currentUser) return;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    if (currentUser.photo_url) {
        elements.userAvatarEdit.src = currentUser.photo_url;
        elements.userAvatarEdit.style.display = 'block';
        elements.avatarPlaceholderEdit.style.display = 'none';
    } else {
        const firstLetter = currentUser.first_name ? currentUser.first_name[0].toUpperCase() : 'U';
        elements.avatarPlaceholderEdit.textContent = firstLetter;
        elements.userAvatarEdit.style.display = 'none';
        elements.avatarPlaceholderEdit.style.display = 'flex';
    }
    
    elements.editBio.value = currentUser.bio || '';
    showScreen('edit');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function saveProfile(): Promise<void> {
    try {
        elements.saveProfileBtn.disabled = true;
        elements.saveProfileBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        
        if (!currentUser) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        const response = await fetch(`${CONFIG.BACKEND_URL}/profile/${currentUser.id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                bio: elements.editBio.value
            })
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.status}`);
        }
        
        const data = await response.json();
        currentUser = data.user;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const tg = (window as any).Telegram.WebApp;
        tg.showPopup({
            title: '–£—Å–ø–µ—Ö',
            message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
            buttons: [{ type: 'ok' }]
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        showScreen('main');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    } finally {
        elements.saveProfileBtn.disabled = false;
        elements.saveProfileBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    }
}

// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners(): void {
    elements.userAvatar.addEventListener('click', showEditProfile);
    elements.avatarPlaceholderSmall.addEventListener('click', showEditProfile);
    elements.saveProfileBtn.addEventListener('click', saveProfile);
    elements.cancelEditBtn.addEventListener('click', () => showScreen('main'));
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    setupEventListeners();
    initializeApp();
});